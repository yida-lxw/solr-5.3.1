<?xml version="1.0"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->

<project name="analyzers-common" default="default" xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
   Analyzers for indexing content in different languages and domains.
  </description>

  <!-- some files for testing that do not have license headers -->
  <property name="rat.excludes" value="**/*.aff,**/*.dic,**/*.txt,**/charfilter/*.htm*,**/*LuceneResourcesWikiPage.html"/>
  <property name="rat.additional-includes" value="src/tools/**"/>

  <import file="../analysis-module-build.xml"/>
	
  <target name="jflex" depends="-install-jflex,clean-jflex,-jflex-StandardAnalyzer,-jflex-UAX29URLEmailTokenizer,
                                -jflex-wiki-tokenizer,-jflex-HTMLStripCharFilter,-jflex-legacy"/>

  <target name="-jflex-HTMLStripCharFilter"
          depends="init,generate-jflex-html-char-entities">
    <jflex file="src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.jflex"
           outdir="src/java/org/apache/lucene/analysis/charfilter"
           nobak="on" inputstreamctor="false"/>
    <!-- Remove the inappropriate JFlex-generated constructor -->
    <replaceregexp file="src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.java"
                   match="/\*\*\s*\*\s*Creates a new scanner\s*\*\s*\*\s*@param\s*in\s*the java.io.Reader to read input from\.\s*\*/\s*public HTMLStripCharFilter\(java\.io\.Reader in\)\s*\{\s*this.zzReader = in;\s*\}"
                   replace="" flags="s"/>
  </target>

  <target name="generate-jflex-html-char-entities">
    <exec dir="src/java/org/apache/lucene/analysis/charfilter"
          output="src/java/org/apache/lucene/analysis/charfilter/HTMLCharacterEntities.jflex"
          executable="${python.exe}" failonerror="true" logerror="true">
      <!-- Tell Python not to write any bytecode cache into the filesystem: -->
      <arg value="-B"/>
      <arg value="htmlentity.py"/>
    </exec>
    <fixcrlf file="src/java/org/apache/lucene/analysis/charfilter/HTMLCharacterEntities.jflex" encoding="UTF-8"/>
  </target>

  <target name="-jflex-wiki-tokenizer" depends="init,-install-jflex">
    <run-jflex dir="src/java/org/apache/lucene/analysis/wikipedia" name="WikipediaTokenizerImpl"/>
  </target>

  <target name="-jflex-StandardAnalyzer" depends="init,-install-jflex">
    <run-jflex-and-disable-buffer-expansion
        dir="src/java/org/apache/lucene/analysis/standard" name="StandardTokenizerImpl"/>
  </target>

  <target name="-jflex-UAX29URLEmailTokenizer" depends="init,-install-jflex">
    <run-jflex-and-disable-buffer-expansion
        dir="src/java/org/apache/lucene/analysis/standard" name="UAX29URLEmailTokenizerImpl"/>
  </target>
  
  <macrodef name="run-jflex">
    <attribute name="dir"/>
    <attribute name="name"/>
    <sequential>
      <jflex file="@{dir}/@{name}.jflex" outdir="@{dir}" nobak="on" inputstreamctor="false"/>
    </sequential>
  </macrodef>

  <macrodef name="run-jflex-and-disable-buffer-expansion">
    <attribute name="dir"/>
    <attribute name="name"/>
    <sequential>
      <jflex file="@{dir}/@{name}.jflex" outdir="@{dir}" nobak="on" inputstreamctor="false"/>
      <!-- LUCENE-5897: Disallow scanner buffer expansion -->
      <replaceregexp file="@{dir}/@{name}.java"
                     match="[ \t]*/\* is the buffer big enough\? \*/\s+if \(zzCurrentPos >= zzBuffer\.length.*?\}[ \t]*\r?\n"
                     replace="" flags="s" />
      <replaceregexp file="@{dir}/@{name}.java"
                     match="private static final int ZZ_BUFFERSIZE ="
                     replace="private int ZZ_BUFFERSIZE ="/>
      <replaceregexp file="@{dir}/@{name}.java"
                     match="int requested = zzBuffer.length - zzEndRead;"
                     replace="int requested = zzBuffer.length - zzEndRead - zzFinalHighSurrogate;"/>
      <replaceregexp file="@{dir}/@{name}.java"
                     match="(zzFinalHighSurrogate = 1;)(\r?\n)"
                     replace="\1\2          if (totalRead == 1) { return true; }\2"/>
    </sequential>
  </macrodef>

  <target name="clean-jflex">
    <delete>
      <fileset dir="src/java/org/apache/lucene/analysis/charfilter" includes="*.java">
        <containsregexp expression="generated.*by.*JFlex"/>
      </fileset>
      <fileset dir="src/java/org/apache/lucene/analysis/wikipedia" includes="*.java">
        <containsregexp expression="generated.*by.*JFlex"/>
      </fileset>
      <fileset dir="src/java/org/apache/lucene/analysis/standard" 
               includes="*.java" excludes="ClassicTokenizerImpl.java">
        <containsregexp expression="generated.*by.*JFlex"/>
      </fileset>
    </delete>
  </target>

  <target name="-jflex-legacy" depends="-install-jflex-1.5.1,-clean-jflex-legacy,-jflex-legacy-StandardAnalyzer,
                                        -jflex-legacy-UAX29URLEmailTokenizer"/>

  <!-- JFlex 1.5.1 task -->
  <target name="-install-jflex-1.5.1" unless="jflex-1.5.1.classpath" depends="ivy-availability-check,ivy-configure">
    <delete dir="${common.build.dir}/ivy-resolution-cache.save" quiet="true" failonerror="false"/>
    <move file="${common.build.dir}/ivy-resolution-cache" overwrite="true"
          todir="${common.build.dir}/ivy-resolution-cache.save"/> <!-- Ignore previously resolved JFlex jar. -->
    <ivy:cachepath organisation="de.jflex" module="jflex" revision="1.5.1"
                   inline="true" transitive="false" pathid="jflex-1.5.1.classpath"/>
    <delete dir="${common.build.dir}/ivy-resolution-cache" quiet="true" failonerror="false"/>
    <move file="${common.build.dir}/ivy-resolution-cache.save" overwrite="true"
          todir="${common.build.dir}/ivy-resolution-cache"/> <!-- Put back the pre-existing resolution cache --> 
    <taskdef name="jflex-1.5.1" classname="jflex.anttask.JFlexTask" classpathref="jflex-1.5.1.classpath"/>
  </target>

  <target name="-jflex-legacy-StandardAnalyzer" depends="init,-install-jflex-1.5.1">
    <run-jflex-1.5.1 dir="src/java/org/apache/lucene/analysis/standard" name="ClassicTokenizerImpl"/>
    <run-jflex-1.5.1 dir="src/java/org/apache/lucene/analysis/standard/std40" name="StandardTokenizerImpl40"/>
  </target>

  <target name="-jflex-legacy-UAX29URLEmailTokenizer" depends="init,-install-jflex-1.5.1">
    <run-jflex-1.5.1 dir="src/java/org/apache/lucene/analysis/standard/std40" name="UAX29URLEmailTokenizerImpl40"/>
  </target>

  <macrodef name="run-jflex-1.5.1">
    <attribute name="dir"/>
    <attribute name="name"/>
    <sequential>
      <jflex-1.5.1 file="@{dir}/@{name}.jflex" outdir="@{dir}" nobak="on" inputstreamctor="false"/>
    </sequential>
  </macrodef>

  <target name="-clean-jflex-legacy">
    <delete>
      <fileset dir="src/java/org/apache/lucene/analysis/standard" includes="ClassicTokenizerImpl.java">
        <containsregexp expression="generated.*by.*JFlex"/>
      </fileset>
      <fileset dir="src/java/org/apache/lucene/analysis/standard/std40" includes="*.java">
        <containsregexp expression="generated.*by.*JFlex"/>
      </fileset>
    </delete>
  </target>

  <property name="tld.zones" value="http://www.internic.net/zones/root.zone"/>
  <property name="tld.output" location="src/java/org/apache/lucene/analysis/standard/ASCIITLD.jflex-macro"/>

  <target name="gen-tlds" depends="compile-tools">
    <java
      classname="org.apache.lucene.analysis.standard.GenerateJflexTLDMacros"
      dir="."
      fork="true"
      failonerror="true">
      <classpath>
      	<pathelement location="${build.dir}/classes/tools"/>
      </classpath>
      <arg value="${tld.zones}"/>
      <arg value="${tld.output}"/>
    </java>
  </target>

  <target name="compile-tools" depends="common.compile-tools">
    <compile
      srcdir="src/tools/java"
      destdir="${build.dir}/classes/tools">
      <classpath refid="classpath"/>
    </compile>
  </target>

  <target name="javadocs" depends="module-build.javadocs"/>

  <target name="regenerate" depends="jflex"/>
</project>
